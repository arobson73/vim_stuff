" ~/.vimrc
"

" no vi compat
set nocompatible
set guifont=Inconsolata\ 14
set autowrite
colorscheme torte


" filetype func off
filetype off

" initialize vundle
set rtp+=~/.vim/bundle/Vundle.vim

call vundle#begin()
" start- all plugins below

Plugin 'VundleVim/Vundle.vim'
Plugin 'derekwyatt/vim-scala'
Plugin 'scrooloose/nerdtree'
Plugin 'majutsushi/tagbar'
Plugin 'godlygeek/tabular'
Plugin 'chrisbra/csv.vim'
"put the cursor on line then do gS or gJ to put code on multiple lines or
"single line
Plugin 'AndrewRadev/splitjoin.vim'
Plugin 'fatih/vim-go', { 'do': ':GoInstallBinaries' }
" stop - all plugins above
call vundle#end()
"call plug#begin('~/.vim/plugged')
"call plug#end()

" filetype func on
filetype plugin indent on

"shortcuts for golang
map <C-n> :cnext<CR>
map <C-m> :cprevious<CR>
"quickfix close \a
nnoremap <leader>a :cclose<CR> 
"autocmd FileType go nmap <leader>b  <Plug>(go-build)
autocmd FileType go nmap <leader>r  <Plug>(go-run)
"autocmd FileType go nmap <leader>t  <Plug>(go-test)

" run :GoBuild or :GoTestCompile based on the go file
function! s:build_go_files()
  let l:file = expand('%')
  if l:file =~# '^\f\+_test\.go$'
    call go#test#Test(0, 1)
  elseif l:file =~# '^\f\+\.go$'
    call go#cmd#Build(0)
  endif
endfunction
autocmd FileType go nmap <leader>b :<C-u>call <SID>build_go_files()<CR>

autocmd FileType go nmap <Leader>c <Plug>(go-coverage-toggle)
